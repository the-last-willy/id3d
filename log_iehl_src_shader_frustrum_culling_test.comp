#version 450 core

struct Interval {
    vec4 lower_bound;
    vec4 upper_bound;
};

layout(location = 0) uniform mat4 clip_to_model;
layout(location = 4) uniform mat4 model_to_clip;

layout(location = 8) uniform uint count;

layout(std430, binding = 0) readonly buffer interval_buffer {
    Interval intervals[];
};

layout(std430, binding = 1) writeonly buffer test_buffer {
    bool tests[];
};

// BoundingBox transformed(BoundingBox bb, mat4 transform) {
//     BoundingBox t = BoundingBox();
//     t.lower_bound = transform * bb.lower_bound;
//     t.upper_bound = transform * bb.upper_bound;
//     return t;
// }

bool are_separated(Interval i0, Interval i1) {
    return false;
}

layout(local_size_x = 256) in;

void main() {
    uint i = gl_LocalInvocationIndex;
    if(i < count) {
        tests[i] = false;
    }
}
