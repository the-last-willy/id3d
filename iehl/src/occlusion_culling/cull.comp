#version 450 core

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
// Common modules.

////////////////////////////////////////////////////////////////////////////////
// Transformation.

vec3 transformed_divided_by_w(in mat4 transform, in vec4 v) {
    vec4 transformed = transform * v;
    return transformed.xyz / transformed.w;
}

////////////////////////////////////////////////////////////////////////////////
// Bounds.

// Invariants:
// 'b[0] <= b[1]'.
struct Bounds {
    // 'b[0]' is the lower bound.
    // 'b[1]' is the upper bound.
    // 'b[0][3]' and 'b[1][3]' are expected to be '1.'
    // and are inteded for paddind reasons.
    vec4 b[2];
};

void clamp(inout Bounds x, in vec3 min, in vec3 max) {
    for(int i = 0; i < 3; ++i) {
        if(x.b[0][i] < min[i]) {
            x.b[0][i] = min[i];
            if(x.b[1][i] < min[i]) {
                x.b[1][i] = min[i];
            }
        }
        if(x.b[1][i] > max[i]) {
            x.b[1][i] = max[i];
            if(x.b[0][i] > min[i]) {
                x.b[0][i] = min[i];
            }
        }
    }
}

void extend(inout Bounds bs, in vec3 v) {
    for(int i = 0; i < 3; ++i) {
        if(v[i] < bs.b[0][i]) {
            bs.b[0][i] = v[i];
        } else if(v[i] > bs.b[0][i]) {
            bs.b[1][i] = v[i];
        }
    }
}

Bounds world_to_clip_bounds(in mat4 world_to_clip, in Bounds world) {
    Bounds clip;
    // First corner.
    {
        vec4 world_corner = vec4(
            world.b[0][0], world.b[0][1], world.b[0][2], 1.);
        vec3 clip_corner = transformed_divided_by_w(
            world_to_clip, world_corner);
        clip.b[0] = clip.b[1] = vec4(clip_corner, 1.);
    }
    // Other corners.
    for(int i = 1; i < 8; ++i) {
        vec4 world_corner = vec4(
            world.b[i & 1][0], world.b[i & 2][1], world.b[i & 4][2], 1.);
        vec3 clip_corner = transformed_divided_by_w(
            world_to_clip, world_corner);
        extend(clip, clip_corner);
    }
    return clip;
}

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
// IO modules.

////////////////////////////////////////////////////////////////////////////////
// Draw command.

// 'glDrawElementsIndirectCommand'.
struct DrawCommand {
    uint  count;
    uint  instanceCount;
    uint  firstIndex;
    uint  baseVertex;
    uint  baseInstance;
};

////////////////////////////////////////////////////////////////////////////////
// Draw command / input.

layout(std430) readonly
buffer input_draw_commands_buffer {
    DrawCommand input_draw_commands[/*draw id*/];
};

////////////////////////////////////////////////////////////////////////////////
// Draw command / output.

layout(std430) coherent
buffer output_draw_command_count_buffer {
    uint draw_command_count;
};

layout(std430) writeonly
buffer output_draw_commands_buffer {
    DrawCommand output_draw_commands[/*draw id*/];
};

////////////////////////////////////////////////////////////////////////////////
// HZB.
// 'Hierarchical Z-Buffer' .

uniform sampler2D hzb;

////////////////////////////////////////////////////////////////////////////////
// Object / group.

layout(std430) readonly
buffer world_object_bounds_buffer {
    Bounds world_object_bounds[/*instance id*/];
};

////////////////////////////////////////////////////////////////////////////////
// View.

uniform mat4 world_to_clip;

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

shared uint local_accepted_count;
shared uint local_offset;

layout(local_size_x = 256) in;

void main() {
    uint global_id = gl_GlobalInvocationID.x;
    uint local_id = gl_LocalInvocationID.x;

    if(local_id == 0) {
        local_accepted_count = 0;
    }

    barrier();

    DrawCommand draw_command;
    bool accepted;

    if(global_id < input_draw_commands.length()) {
        draw_command = input_draw_commands[global_id];
        Bounds world_bounds = world_object_bounds[draw_command.baseInstance];
        Bounds clip_bounds = world_to_clip_bounds(world_to_clip, world_bounds);
        // Might not be necessary.
        clamp(clip_bounds, vec3(-1.), vec3(1.));
        vec2 lengths = clip_bounds.b[1].xy - clip_bounds.b[0].xy;
        float lod = max(ceil(log2(max(lengths.x, lengths.y))), 0.);

        float clip_min_z = clip_bounds.b[0].z;
        float hzb_max_z = max(
            max(
                textureLod(hzb, vec2(clip_bounds.b[0].x, clip_bounds.b[0].y), lod).x,
                textureLod(hzb, vec2(clip_bounds.b[0].x, clip_bounds.b[1].y), lod).x),
            max(
                textureLod(hzb, vec2(clip_bounds.b[1].x, clip_bounds.b[0].y), lod).x,
                textureLod(hzb, vec2(clip_bounds.b[1].x, clip_bounds.b[1].y), lod).x));
        
        
        if(clip_min_z < hzb_max_z) {
            // Accepted, the object might be partially visible.
            accepted = true;
            atomicAdd(local_accepted_count, 1);
        } else {
            // Refused, the object isn't be visible.
            accepted = false;
        }
    }

    barrier();

    // 'readFirstInvocationARB' would be better here.
    if(global_id == 0) {
        local_offset = atomicAdd(draw_command_count, local_accepted_count);
    }

    barrier;

    if(accepted) {
        output_draw_commands[local_offset + local_id] = draw_command;
    }
}
