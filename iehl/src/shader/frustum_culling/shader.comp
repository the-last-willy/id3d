#version 450 core

struct DrawParameters {
    uint count;
    uint instance_count;
    uint first_index;
    uint base_vertex;
    uint base_instance;
};

struct Interval {
    vec4 lb;
    vec4 ub;
};

layout(location = 0 ) uniform Interval frustum_clip_bounds;
layout(location = 2 ) uniform Interval frustum_world_bounds;
layout(location = 4) uniform mat4     world_to_clip;

layout(std430, binding = 0) readonly buffer objects_bounds_buffer {
    Interval objects_bounds[];
};

layout(std430, binding = 1) readonly buffer input_draw_parameters_buffer {
    DrawParameters input_draw_parameters[];
};

layout(std430, binding = 2) coherent buffer output_count_buffer {
    uint output_count;
};

layout(std430, binding = 3) writeonly buffer output_draw_parameters_buffer {
    DrawParameters output_draw_parameters[];
};

// bool is_frustum_culled_in_clip_space(in Interval bounds) {
//     return false;
// }

// bool is_frustum_culled_in_local_space(in Interval bounds) {
//     return false;
// }

// bool is_frustum_culled(in Interval bounds) {
//     return are_separated_in_clip_space(bounds)
//     || are_separated_in_local_space(bounds);
// }

layout(local_size_x = 256) in;

void main() {
    uint index = gl_GlobalInvocationID.x;
    if(index < objects_bounds.length()) {
        output_draw_parameters[index] = input_draw_parameters[index];
        atomicAdd(output_count, 1);
    }
}
